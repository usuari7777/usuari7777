<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">

<!-- Begin Jekyll SEO tag v2.8.0 -->
<title>Collections | Java programming language</title>
<meta name="generator" content="Jekyll v3.9.0" />
<meta property="og:title" content="Collections" />
<meta property="og:locale" content="en_US" />
<meta name="description" content="Course of Java programming language, useful for Professional Training Modules such as Multi Platform Application Development or Web Application Development. Written by Nacho Iborra, Mari Chelo Rubio and Javier Carrasco, professional training teachers at I.E.S. San Vicente (San Vicente del Raspeig, Alicante, Spain)" />
<meta property="og:description" content="Course of Java programming language, useful for Professional Training Modules such as Multi Platform Application Development or Web Application Development. Written by Nacho Iborra, Mari Chelo Rubio and Javier Carrasco, professional training teachers at I.E.S. San Vicente (San Vicente del Raspeig, Alicante, Spain)" />
<link rel="canonical" href="http://nachoiborraies.github.io/java/md/en/06a.html" />
<meta property="og:url" content="http://nachoiborraies.github.io/java/md/en/06a.html" />
<meta property="og:site_name" content="Java programming language" />
<meta property="og:type" content="website" />
<meta name="twitter:card" content="summary" />
<meta property="twitter:title" content="Collections" />
<script type="application/ld+json">
{"@context":"https://schema.org","@type":"WebPage","description":"Course of Java programming language, useful for Professional Training Modules such as Multi Platform Application Development or Web Application Development. Written by Nacho Iborra, Mari Chelo Rubio and Javier Carrasco, professional training teachers at I.E.S. San Vicente (San Vicente del Raspeig, Alicante, Spain)","headline":"Collections","url":"http://nachoiborraies.github.io/java/md/en/06a.html"}</script>
<!-- End Jekyll SEO tag -->

    <link rel="stylesheet" href="https://nachoiborraies.github.io/java/assets/css/style.css?v=b97498d877d27f9c14e83edf3052019f2c929d47">
    <!-- start custom head snippets, customize with your own _includes/head-custom.html file -->

<!-- Setup Google Analytics -->



<!-- You can set your favicon here -->
<!-- link rel="shortcut icon" type="image/x-icon" href="/java/favicon.ico" -->

<!-- end custom head snippets -->

  </head>
  <body>
    <div class="container-lg px-3 my-5 markdown-body">
      
      <h1><a href="http://nachoiborraies.github.io/java/">Java programming language</a></h1>
      

      <h1 id="collections">Collections</h1>

<h2 id="collection-types">Collection types</h2>

<div style="text-align: right">
<a target="_blank" href="https://nachoiborraies.github.io/java/md/en/slides/06a.html"><img src="https://nachoiborraies.github.io/java/img/diapositivas.png" width="32" /></a>&nbsp;&nbsp;
<a target="_blank" href="https://nachoiborraies.github.io/java/md/en/06a.pdf"><img src="https://nachoiborraies.github.io/java/img/pdf.png" width="32" /></a>
</div>

<p>In this unit we are going to explain what collections are, and how Java manages dynamic data. Weâ€™ll see the difference between dynamic and static data, and the different Java types to deal with dynamic collections.</p>

<h3 id="1-static-vs-dynamic">1. Static vs dynamic</h3>

<p>In previous units we have worked with elements such as arrays or strings, along with basic Java types (integers, doubles and so on). All these types are called <strong>static</strong> types because their size is established when we declare the corresponding variables, and it never changes along the program execution.</p>

<blockquote>
  <p><strong>NOTE</strong>: remember that, although strings can change their size by adding or removing pieces of text, Java actually creates a brand new string with every operation.</p>
</blockquote>

<p>On the other hand, <strong>dynamic</strong> types can change their size along program execution. For instance, if we have a list of books, we can dynamically add or remove books from the list, without having to manually increase or decrease any counter, nor re-assigning the whole collection to a new variable.</p>

<p>The main advantage of static types is the efficiency: as we know the size of the variable when we declare it, Java does not need to care about checking the size every time we use the variable, so programs are faster. However, the main drawback of dealing with these types that they are too rigid, and if we need to increase the previously established size, code can become quite tricky.</p>

<h3 id="2-main-collection-types-in-java">2. Main collection types in Java</h3>

<p>Java has some different types to deal with dynamic data. Most of them belong to <code class="language-plaintext highlighter-rouge">java.util</code> package, and can be classified into these main categories:</p>

<ul>
  <li><strong>Lists</strong>: an ordered sequence of data, usually indexed. We can think of lists as a dynamic version of arrays: we can access an element by its numeric position, sort them, and many other operations. Besides, there are some specific types of lists in which only certain operations are allowed, such as <em>stacks</em> or <em>queues</em>.</li>
  <li><strong>Maps</strong>: also known as <em>dictionaries</em> or <em>hash tables</em>, they store data that can be retrieved by a given key, just like we do when we look for a word definition in a dictionary: we look for a key (the word) and then we get its definition.</li>
  <li><strong>Sets</strong>: they store unordered data with the sole premise that there are no repeated elements.</li>
  <li><strong>Trees</strong>: they store data connected in some sort of parent-child relationship. From one tree node we can go to its children. As we will see in later documents, this provides some useful advantages when dealing with certain information.</li>
</ul>

<p>Depending on the application we are developing, we may choose one of these types (or some of them). In the following documents we are going to explain how to manage each kind of collection, and the main operations that can be done with them.</p>


      
    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/anchor-js/4.1.0/anchor.min.js" integrity="sha256-lZaRhKri35AyJSypXXs4o6OPFTbTmUoltBbDCbdzegg=" crossorigin="anonymous"></script>
    <script>anchors.add();</script>
  </body>
</html>
