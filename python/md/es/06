<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">

<!-- Begin Jekyll SEO tag v2.8.0 -->
<title>Arrays y listas | Programación en Python</title>
<meta name="generator" content="Jekyll v3.9.0" />
<meta property="og:title" content="Arrays y listas" />
<meta property="og:locale" content="en_US" />
<meta name="description" content="Curso de programación en Python. Desde los elementos básicos del lenguaje hasta conceptos algo más avanzados. Escrito por Nacho Iborra, profesor de ciclos formativos de Formación Profesional en el I.E.S. San Vicente (San Vicente del Raspeig, Alicante, España)" />
<meta property="og:description" content="Curso de programación en Python. Desde los elementos básicos del lenguaje hasta conceptos algo más avanzados. Escrito por Nacho Iborra, profesor de ciclos formativos de Formación Profesional en el I.E.S. San Vicente (San Vicente del Raspeig, Alicante, España)" />
<link rel="canonical" href="06.html" />
<meta property="og:url" content="http://nachoiborraies.github.io/python/md/es/06.html" />
<meta property="og:site_name" content="Programación en Python" />
<meta property="og:type" content="website" />
<meta name="twitter:card" content="summary" />
<meta property="twitter:title" content="Arrays y listas" />
<script type="application/ld+json">
{"@context":"https://schema.org","@type":"WebPage","description":"Curso de programación en Python. Desde los elementos básicos del lenguaje hasta conceptos algo más avanzados. Escrito por Nacho Iborra, profesor de ciclos formativos de Formación Profesional en el I.E.S. San Vicente (San Vicente del Raspeig, Alicante, España)","headline":"Arrays y listas","url":"http://nachoiborraies.github.io/python/md/es/06.html"}</script>
<!-- End Jekyll SEO tag -->

    <link rel="stylesheet" href="../../assets/css/style.css?v=ad772411c2d54aed2fa2db75ebd82d7033d25af5">
    <!-- start custom head snippets, customize with your own _includes/head-custom.html file -->

<!-- Setup Google Analytics -->



<!-- You can set your favicon here -->
<!-- link rel="shortcut icon" type="image/x-icon" href="/python/favicon.ico" -->

<!-- end custom head snippets -->

  </head>
  <body>
    <div class="container-lg px-3 my-5 markdown-body">
      
      <h1><a href="../../index.html">Programación en Python</a></h1>
      

      <h1 id="arrays-y-listas">Arrays y listas</h1>

<div style="text-align: right">
<!--
<a target="_blank" href="slides/06.html"><img src="../../img/diapositivas.png" width="32" /></a>&nbsp;&nbsp;
-->
<a target="_blank" href="06.pdf"><img src="../../img/pdf.png" width="32" /></a>
</div>

<p>En Python no existen arrays propiamente dichos, es decir, no existe una estructura de datos de tamaño prefijado e inamovible donde añadir elementos localizados por un índice o posición. En su lugar, se utilizan <strong>listas</strong>, con un comportamiento similar pero flexible, donde podemos añadir y quitar elementos fácilmente en/de cualquier posición.</p>

<h2 id="1-definición-de-listas">1. Definición de listas</h2>

<p>Una lista en Python será una secuencia de elementos que <em>pueden ser de distintos tipos</em>. Se representa con los elementos separados por comas, entre corchetes. Por ejemplo:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">datos</span> <span class="o">=</span> <span class="p">[</span><span class="s">'Nacho'</span><span class="p">,</span> <span class="s">'Pepe'</span><span class="p">,</span> <span class="mi">2015</span><span class="p">,</span> <span class="mi">2013</span><span class="p">]</span>
</code></pre></div></div>

<p>Además, podemos crear una lista sin valores iniciales, usando corchetes vacíos o la instrucción <code class="language-plaintext highlighter-rouge">list</code>:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">datos</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">datos</span> <span class="o">=</span> <span class="nb">list</span><span class="p">()</span>
</code></pre></div></div>

<p>Una lista puede tener tipos simples (textos, números, etc) o tipos complejos (como por ejemplo, otras listas, u objetos de clases como veremos en otros documentos del curso):</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">datos</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">[</span><span class="s">"Nacho"</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">233</span><span class="p">],</span>
    <span class="p">[</span><span class="s">"Pepe"</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mi">231</span><span class="p">],</span>
    <span class="p">...</span>
<span class="p">]</span>
</code></pre></div></div>

<h2 id="2-acceder-a-los-elementos-de-una-lista">2. Acceder a los elementos de una lista</h2>

<p>Como hemos dicho, los elementos de una lista se referencian por un índice o posición numérica, empezando en cero. Así, si tenemos una lista como esta:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">datos</span> <span class="o">=</span> <span class="p">[</span><span class="s">'Nacho'</span><span class="p">,</span> <span class="s">'Pepe'</span><span class="p">,</span> <span class="mi">2015</span><span class="p">,</span> <span class="mi">2013</span><span class="p">]</span>
</code></pre></div></div>

<p>y ejecutamos la instrucción <code class="language-plaintext highlighter-rouge">print(datos[1])</code>, se imprimirá por pantalla el segundo elemento de la lista, que es <em>Pepe</em>. Además, Python ofrece la posibilidad de imprimir una lista entera usando la misma instrucción <code class="language-plaintext highlighter-rouge">print</code>. En este caso, se mostrarían los datos tal cual están almacenados, separados por comas, y entre corchetes:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="n">datos</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>     <span class="c1"># Pepe
</span><span class="k">print</span><span class="p">(</span><span class="n">datos</span><span class="p">)</span>        <span class="c1"># ['Nacho', 'Pepe', 2015, 2013] 
</span></code></pre></div></div>

<h2 id="3-añadir-modificar-y-borrar-elementos">3. Añadir, modificar y borrar elementos</h2>

<p>Si queremos añadir un elemento <strong>al final</strong> de la lista usamos la instrucción <code class="language-plaintext highlighter-rouge">append</code>. Por ejemplo:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">datos</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="mi">2017</span><span class="p">)</span>
</code></pre></div></div>

<p>En el caso de querer insertar un elemento <strong>en una posición determinada</strong>, usamos la instrucción <code class="language-plaintext highlighter-rouge">insert</code>, indicando en qué posición queremos insertar, y el dato que queremos insertar. Automáticamente, todos los elementos a la derecha de esa posición se desplazarán para hacer hueco al nuevo elemento.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">datos</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1996</span><span class="p">)</span>
</code></pre></div></div>

<p>También podemos <strong>actualizar el valor</strong> de un dato de la lista, simplemente indicando su posición y el nuevo valor que queremos asignar:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">datos</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2016</span>
</code></pre></div></div>

<p>Finalmente, si queremos <strong>eliminar</strong> un dato de la lista, usamos la instrucción <code class="language-plaintext highlighter-rouge">del</code> , seguida del elemento que queremos borrar.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">del</span> <span class="n">datos</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
</code></pre></div></div>

<p>Alternativamente, podemos usar la instrucción <code class="language-plaintext highlighter-rouge">remove</code> de la propia lista, indicando la posición a borrar:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">datos</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="4-otras-operaciones-simples">4. Otras operaciones simples</h2>

<p>Hay otras operaciones que nos pueden resultar útiles sobre una lista. Por ejemplo, la instrucción <code class="language-plaintext highlighter-rouge">len(lista)</code> devuelve el número de elementos actualmente almacenado en la lista (tamaño de la lista):</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">datos</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">datos</span><span class="p">))</span>       <span class="c1"># 4
</span></code></pre></div></div>

<p>La instrucción <code class="language-plaintext highlighter-rouge">list(valor)</code> convierte un elemento en una lista de valores.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">datos</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="s">'123'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">datos</span><span class="p">)</span>            <span class="c1"># ['1', '2', '3']
</span></code></pre></div></div>

<p>La operación <code class="language-plaintext highlighter-rouge">lista1 + lista2</code> concatena los datos de dos listas</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">datos1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
<span class="n">datos2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
<span class="n">datosTotales</span> <span class="o">=</span> <span class="n">datos1</span> <span class="o">+</span> <span class="n">datos2</span>  <span class="c1"># [1, 2, 3, 4, 4, 5, 6]
</span></code></pre></div></div>

<p>La operación <code class="language-plaintext highlighter-rouge">lista * N</code> genera una nueva lista donde los elementos de la lista original aparecen repetidos N veces</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">datos</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
<span class="n">datosRepetidos</span> <span class="o">=</span> <span class="n">datos</span> <span class="o">*</span> <span class="mi">3</span>      <span class="c1"># [4, 5, 6, 4, 5, 6, 4, 5, 6]
</span></code></pre></div></div>

<p>La expresión <code class="language-plaintext highlighter-rouge">n in lista</code> comprueba si el dato <em>n</em> está en la lista</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">datos</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
<span class="k">if</span> <span class="mi">4</span> <span class="ow">in</span> <span class="n">datos</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Existe el dato 4"</span><span class="p">)</span>
</code></pre></div></div>

<p>Las instrucciones <code class="language-plaintext highlighter-rouge">max(lista)</code> y <code class="language-plaintext highlighter-rouge">min(lista)</code> obtienen el mayor / menor valor de la lista, respectivamente</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">datos</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="n">datos</span><span class="p">))</span>       <span class="c1"># 6
</span></code></pre></div></div>

<p>La instrucción <code class="language-plaintext highlighter-rouge">lista.count(objeto)</code> obtiene el número de apariciones del objeto en la lista</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">datos</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="n">datos</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="mi">4</span><span class="p">))</span>   <span class="c1"># 2
</span></code></pre></div></div>

<p>La instrucción <code class="language-plaintext highlighter-rouge">lista.index(objeto)</code> obtiene la posición donde aparece por primera vez el objeto en la lista</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">datos</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="n">datos</span><span class="p">.</span><span class="n">index</span><span class="p">(</span><span class="mi">4</span><span class="p">))</span>   <span class="c1"># 0
</span></code></pre></div></div>

<p>Finalmente, la instrucción <code class="language-plaintext highlighter-rouge">lista.reverse()</code> invierte el orden de la lista. Este método NO devuelve una nueva lista, sino que afecta a la original. Si queremos mantener el orden original y que la lista invertida sea otra nueva, podemos usar la instrucción <code class="language-plaintext highlighter-rouge">lista[::-1]</code> y asignar el valor a otra variable</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">datos</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
<span class="n">datos</span><span class="p">.</span><span class="n">reverse</span><span class="p">()</span>                <span class="c1"># [4, 3, 2, 1]
</span><span class="n">datosInvertidos</span> <span class="o">=</span> <span class="n">datos</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>  <span class="c1"># [1, 2, 3, 4]
</span></code></pre></div></div>

<blockquote>
  <p><strong>Ejercicio 1</strong>:</p>

  <p>Crea un programa llamado <code class="language-plaintext highlighter-rouge">ListaInvertida.py</code> que le pida al usuario que introduzca un conjunto de nombres separados por comas, y le muestre por pantalla la misma lista en orden inverso.</p>
</blockquote>

<blockquote>
  <p><strong>Ejercicio 2</strong>:</p>

  <p>Crea un programa llamado <code class="language-plaintext highlighter-rouge">Loteria.py</code> que le pida al usuario que introduzca los 6 números que juega a la lotería (separados por espacios). Entonces, deberá crear una lista con ellos, ordenarla ascendentemente e imprimirla en pantalla. Además, el programa debe indicar si es una lista válida (es decir, los números deben estar entre 1 y 49, inclusive, sin repetirse). Por ejemplo:</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Introduce los 6 números de la lotería separados por espacios
1 20 12 20 6 50
[1, 6, 12, 20, 20, 50]
La lista NO es válida:
Hay números repetidos
Hay números menores que 1 o mayores que 49
</code></pre></div></div>

<h2 id="5-algunas-operaciones-avanzadas-con-listas">5. Algunas operaciones avanzadas con listas</h2>

<p>En este apartado veremos algunas operaciones algo más complejas que se pueden realizar con listas.</p>

<h3 id="51-ordenación-de-listas">5.1. Ordenación de listas</h3>

<p>La instrucción <code class="language-plaintext highlighter-rouge">lista.sort(funcion)</code> ordena una lista según el criterio especificado en la función indicada. Para listas de datos simples (listas de enteros, de strings…) no hace falta indicar ninguna función: las listas se ordenan automáticamente de menor a mayor. Si queremos una ordenación inversa, usamos un parámetro adicional llamado <code class="language-plaintext highlighter-rouge">reverse</code>:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">datos</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
<span class="n">datos</span><span class="p">.</span><span class="n">sort</span><span class="p">()</span>                <span class="c1"># [2, 4, 5, 7]
</span><span class="n">datos</span><span class="p">.</span><span class="n">sort</span><span class="p">(</span><span class="n">reverse</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>    <span class="c1"># [7, 5, 4, 2]
</span></code></pre></div></div>

<p>Esta instrucción afecta a la lista original, que queda automáticamente ordenada por el criterio que hayamos elegido. Si queremos ordenar algunos datos más complejos (como objetos, o tuplas, debemos proporcionar una función que indique el criterio de comparación). Por ejemplo, esta lista de tuplas queda ordenada ascendentemente por su edad (segundo campo):</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">ordenarPorEdad</span><span class="p">(</span><span class="n">persona</span><span class="p">):</span>
    <span class="k">return</span> <span class="p">(</span><span class="n">persona</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>

<span class="n">gente</span> <span class="o">=</span> <span class="p">[(</span><span class="s">"John Doe"</span><span class="p">,</span> <span class="mi">36</span><span class="p">,</span> <span class="s">"611223344"</span><span class="p">),</span> 
         <span class="p">(</span><span class="s">"Mary Stewart"</span><span class="p">,</span> <span class="mi">54</span><span class="p">,</span> <span class="s">"733445566"</span><span class="p">),</span>
         <span class="p">...]</span>
<span class="n">gente</span><span class="p">.</span><span class="n">sort</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="n">ordenarPorEdad</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="52-mapeo-de-listas">5.2. Mapeo de listas</h3>

<p>La instrucción <code class="language-plaintext highlighter-rouge">map</code> aplica una función de transformación a una lista y devuelve los elementos transformados. Estos elementos pueden formar de nuevo una lista usando la instrucción <code class="language-plaintext highlighter-rouge">list</code>. Este ejemplo obtiene una lista con los cuadrados de los números de la lista original:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">cuadrado</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">return</span> <span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">x</span><span class="p">)</span>

<span class="n">lista</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
<span class="n">cuadrados</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="n">cuadrado</span><span class="p">,</span> <span class="n">lista</span><span class="p">))</span>
</code></pre></div></div>


      
    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/anchor-js/4.1.0/anchor.min.js" integrity="sha256-lZaRhKri35AyJSypXXs4o6OPFTbTmUoltBbDCbdzegg=" crossorigin="anonymous"></script>
    <script>anchors.add();</script>
  </body>
</html>
