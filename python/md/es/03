<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">

<!-- Begin Jekyll SEO tag v2.8.0 -->
<title>Estructuras de control | Programación en Python</title>
<meta name="generator" content="Jekyll v3.9.0" />
<meta property="og:title" content="Estructuras de control" />
<meta property="og:locale" content="en_US" />
<meta name="description" content="Curso de programación en Python. Desde los elementos básicos del lenguaje hasta conceptos algo más avanzados. Escrito por Nacho Iborra, profesor de ciclos formativos de Formación Profesional en el I.E.S. San Vicente (San Vicente del Raspeig, Alicante, España)" />
<meta property="og:description" content="Curso de programación en Python. Desde los elementos básicos del lenguaje hasta conceptos algo más avanzados. Escrito por Nacho Iborra, profesor de ciclos formativos de Formación Profesional en el I.E.S. San Vicente (San Vicente del Raspeig, Alicante, España)" />
<link rel="canonical" href="03.html" />
<meta property="og:url" content="http://nachoiborraies.github.io/python/md/es/03.html" />
<meta property="og:site_name" content="Programación en Python" />
<meta property="og:type" content="website" />
<meta name="twitter:card" content="summary" />
<meta property="twitter:title" content="Estructuras de control" />
<script type="application/ld+json">
{"@context":"https://schema.org","@type":"WebPage","description":"Curso de programación en Python. Desde los elementos básicos del lenguaje hasta conceptos algo más avanzados. Escrito por Nacho Iborra, profesor de ciclos formativos de Formación Profesional en el I.E.S. San Vicente (San Vicente del Raspeig, Alicante, España)","headline":"Estructuras de control","url":"http://nachoiborraies.github.io/python/md/es/03.html"}</script>
<!-- End Jekyll SEO tag -->

    <link rel="stylesheet" href="../../assets/css/style.css?v=ad772411c2d54aed2fa2db75ebd82d7033d25af5">
    <!-- start custom head snippets, customize with your own _includes/head-custom.html file -->

<!-- Setup Google Analytics -->



<!-- You can set your favicon here -->
<!-- link rel="shortcut icon" type="image/x-icon" href="/python/favicon.ico" -->

<!-- end custom head snippets -->

  </head>
  <body>
    <div class="container-lg px-3 my-5 markdown-body">
      
      <h1><a href="../../index.html">Programación en Python</a></h1>
      

      <h1 id="estructuras-de-control">Estructuras de control</h1>

<div style="text-align: right">
<!--
<a target="_blank" href="slides/03.html"><img src="../../img/diapositivas.png" width="32" /></a>&nbsp;&nbsp;
-->
<a target="_blank" href="03.pdf"><img src="../../img/pdf.png" width="32" /></a>
</div>

<p>Las estructuras de control nos permiten crear programas con múltiples caminos posibles a seguir, dependiendo de ciertas condiciones a comprobar. Estas estructuras son también habituales en otros lenguajes de programación… hablamos de <em>if</em>, <em>while</em> o <em>for</em>.</p>

<h2 id="1-estructuras-selectivas-if-ifelse-ifelifelse">1. Estructuras selectivas: <em>if</em>, <em>if..else</em>, <em>if..elif..else</em></h2>

<p>Si queremos ejecutar un conjunto de instrucciones si se cumple una determinada condición, debemos añadir esta condición en una cláusula <code class="language-plaintext highlighter-rouge">if</code>, y las instrucciones vinculadas a esa condición deben quedar <strong>tabuladas</strong> respecto a ese <em>if</em>. Por ejemplo:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">numero</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>
<span class="k">if</span> <span class="n">numero</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
    <span class="n">numero</span> <span class="o">=</span> <span class="n">numero</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="k">print</span> <span class="p">(</span><span class="s">"El siguiente número es"</span><span class="p">,</span> <span class="n">numero</span><span class="p">)</span>
<span class="k">print</span> <span class="p">(</span><span class="s">"Fin del programa"</span><span class="p">)</span>
</code></pre></div></div>

<p>Podemos también distinguir entre dos posibles caminos con la estructura <code class="language-plaintext highlighter-rouge">if..else</code>. En este caso, debemos tabular el bloque de instrucciones que vaya asociado a cada parte (<em>if</em> o <em>else</em>):</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">numero</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>
<span class="k">if</span> <span class="n">numero</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
    <span class="n">numero</span> <span class="o">=</span> <span class="n">numero</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="k">print</span> <span class="p">(</span><span class="s">"El siguiente número es"</span><span class="p">,</span> <span class="n">numero</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="k">print</span> <span class="p">(</span><span class="s">"El número no es positivo"</span><span class="p">)</span>
<span class="k">print</span> <span class="p">(</span><span class="s">"Fin del programa"</span><span class="p">)</span>
</code></pre></div></div>

<p>Si necesitamos tener más de dos caminos diferentes, podemos anidar estructuras <code class="language-plaintext highlighter-rouge">if..else</code> unas dentro de otras…</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">numero</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>
<span class="k">if</span> <span class="n">numero</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
    <span class="n">numero</span> <span class="o">=</span> <span class="n">numero</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="k">print</span> <span class="p">(</span><span class="s">"El siguiente número es"</span><span class="p">,</span> <span class="n">numero</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">numero</span> <span class="o">&lt;</span> <span class="o">-</span><span class="mi">10</span><span class="p">:</span>
        <span class="k">print</span> <span class="p">(</span><span class="s">"El número es demasiado bajo"</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">print</span> <span class="p">(</span><span class="s">"El número no es positivo"</span><span class="p">)</span>
<span class="k">print</span> <span class="p">(</span><span class="s">"Fin del programa"</span><span class="p">)</span>
</code></pre></div></div>

<p>… pero, en lugar de anidar estas estructuras, también podemos utilizar la cláusula <code class="language-plaintext highlighter-rouge">if..elif</code> para especificar más de un bloque de condiciones. Podemos enlazar tantas clásulas <code class="language-plaintext highlighter-rouge">elif</code> como necesitemos, y también concluir con una cláusula <code class="language-plaintext highlighter-rouge">else</code> si queremos, para el último camino a distinguir:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">numero</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>
<span class="k">if</span> <span class="n">numero</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
    <span class="n">numero</span> <span class="o">=</span> <span class="n">numero</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="k">print</span> <span class="p">(</span><span class="s">"El siguiente número es"</span><span class="p">,</span> <span class="n">numero</span><span class="p">)</span>
<span class="k">elif</span> <span class="n">numero</span> <span class="o">&lt;</span> <span class="o">-</span><span class="mi">10</span><span class="p">:</span>
    <span class="k">print</span> <span class="p">(</span><span class="s">"El número es demasiado bajo"</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="k">print</span> <span class="p">(</span><span class="s">"El número no es positivo"</span><span class="p">)</span>
<span class="k">print</span> <span class="p">(</span><span class="s">"Fin del programa"</span><span class="p">)</span>
</code></pre></div></div>

<p>No existe cláusula <em>switch/case</em> en Python, ya que normalmente lo que se puede hacer con este tipo de estructuras se puede hacer también con <em>if</em>.</p>

<h2 id="2-estructuras-repetitivas-o-bucles">2. Estructuras repetitivas o bucles</h2>

<h3 id="21-el-bucle-while">2.1. El bucle <em>while</em></h3>

<p>La estructura <code class="language-plaintext highlighter-rouge">while</code> tiene una sintaxis similar a <em>if</em>. El bloque de instrucciones asociado se va a ejecutar repetidamente mientras se cumpla la condición indicada. Por ejemplo, este código le pide números al usuario repetidamente hasta que escribe un número negativo o cero:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">numero</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>
<span class="k">while</span> <span class="n">numero</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
    <span class="k">print</span> <span class="p">(</span><span class="s">"Has escrito"</span><span class="p">,</span> <span class="n">numero</span><span class="p">)</span>
    <span class="n">numero</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>
<span class="k">print</span> <span class="p">(</span><span class="s">"Fin del programa"</span><span class="p">)</span>
</code></pre></div></div>

<p>No hay una estructura <em>do..while</em> en Python, que sí existe en otros lenguajes, ya que cualquier bucle <em>do..while</em> se puede representar como <em>while</em> con algunos pequeños cambios.</p>

<h3 id="22-el-bucle-for">2.2. El bucle <em>for</em></h3>

<p>Sin embargo, como en otros muchos lenguajes, sí hay una cláusula <code class="language-plaintext highlighter-rouge">for</code> en Python, y se puede utilizar de varias formas:</p>

<ul>
  <li>Podemos, por ejemplo, explorar una secuencia determinada de valores. En este ejemplo, la variable <code class="language-plaintext highlighter-rouge">valor</code> tomará los distintos valores indicados en la lista (2, 4 y 5):</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">valor</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]:</span>
    <span class="k">print</span> <span class="p">(</span><span class="n">valor</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>También podemos hacer un uso más “tradicional”, e iterar desde un valor inicial hasta uno final. En este ejemplo, mostramos por pantalla los números del 1 al 4 (inclusive). Si sólo especificamos un número en el rango, entonces Python cuenta del 0 hasta ese número (sin incluir dicho número).</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">valor</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">):</span>
    <span class="k">print</span> <span class="p">(</span><span class="n">valor</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>En el caso de que sólo queramos indicar un número de repeticiones sin intención de usar el contador, podemos especificar un único valor en <code class="language-plaintext highlighter-rouge">range</code>:</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
    <span class="p">...</span>
</code></pre></div></div>

<ul>
  <li>Finalmente, podemos establecer un incremento distinto de 1, especificando un tercer parámetro dentro de la opción <em>range</em>. Por ejemplo, aquí contamos del 0 al 100 con un incremento de 10 en 10:</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">valor</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">101</span><span class="p">,</span> <span class="mi">10</span><span class="p">):</span>
    <span class="k">print</span> <span class="p">(</span><span class="n">valor</span><span class="p">)</span>
</code></pre></div></div>

<blockquote>
  <p><strong>Ejercicio 1</strong>:</p>

  <p>Crea un programa llamado <code class="language-plaintext highlighter-rouge">Notas.py</code> que le pida al usuario 3 notas, y calcule la nota final según estas reglas:</p>

  <ul>
    <li>Si ninguna nota es mayor que 4, la nota final es 0</li>
    <li>Si algunas notas son mayores que 4 (pero no todas), la nota final es 2</li>
    <li>Si todas las notas son mayores que 4, la nota final será el 30% de la primera más el 20% de la segunda más el 50% de la tercera</li>
  </ul>
</blockquote>

<blockquote>
  <p><strong>Ejercicio 2</strong>:</p>

  <p>Crea un programa llamado <code class="language-plaintext highlighter-rouge">Factura.py</code> que le pida al usuario precios para una factura, hasta que escriba 0. Entonces, el programa debe mostrar el total de la factura con 2 dígitos decimales.</p>
</blockquote>

<blockquote>
  <p><strong>Ejercicio 3</strong>:</p>

  <p>Crea un programa llamado <code class="language-plaintext highlighter-rouge">MayorMenor.py</code> que le pida al usuario que introduzca una secuencia de N números positivos (primero el usuario deberá indicar cuántos números va a introducir). Al final del proceso, el programa deberá mostrar por pantalla el valor del número mayor y el menor introducidos por el usuario. Por ejemplo:</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Dime cuántos números vas a introducir:
3
Escribe 3 números:
3
7
2
El mayor es 7
El menor es 2
</code></pre></div></div>


      
    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/anchor-js/4.1.0/anchor.min.js" integrity="sha256-lZaRhKri35AyJSypXXs4o6OPFTbTmUoltBbDCbdzegg=" crossorigin="anonymous"></script>
    <script>anchors.add();</script>
  </body>
</html>
